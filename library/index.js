"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
const core_1 = require("@angular-devkit/core");
const schematics_1 = require("@angular-devkit/schematics");
const path = require("path");
function forwardSlashes(value) {
    return value.replace(/\\/g, '/');
}
function updateJsonFile(host, path, callback) {
    const source = host.read(path);
    if (source) {
        const sourceText = source.toString('utf-8');
        const json = JSON.parse(sourceText);
        callback(json);
        host.overwrite(path, JSON.stringify(json, null, 2));
    }
    return host;
}
function updateTsConfig(npmPackageName, entryFilePath) {
    return (host) => {
        if (!host.exists('tsconfig.json')) {
            return host;
        }
        return updateJsonFile(host, 'tsconfig.json', (tsconfig) => {
            tsconfig.compilerOptions.baseUrl = '.';
            if (!tsconfig.compilerOptions.paths) {
                tsconfig.compilerOptions.paths = {};
            }
            if (!tsconfig.compilerOptions.paths[npmPackageName]) {
                tsconfig.compilerOptions.paths[npmPackageName] = [];
            }
            tsconfig.compilerOptions.paths[npmPackageName].push(entryFilePath);
        });
    };
}
function addDependenciesAndScriptsToPackageJson() {
    return (host) => {
        if (!host.exists('package.json')) {
            return host;
        }
        return updateJsonFile(host, 'package.json', (json) => {
            if (!json['devDependencies']) {
                json['devDependencies'] = {};
            }
            json.devDependencies = Object.assign({ '@angular/compiler': '^5.0.0', '@angular/compiler-cli': '^5.0.0', 'ng-packagr': '^2.2.0', 'tsickle': '>=0.25.5', 'tslib': '^1.7.1', 'typescript': '>=2.4.2' }, json.devDependencies);
        });
    };
}
function default_1(options) {
    if (!options.name) {
        throw new schematics_1.SchematicsException(`name option is required.`);
    }
    const name = options.name;
    let entryFile = options.entryFile ? options.entryFile : 'public_api';
    if (entryFile.endsWith('.ts')) {
        entryFile = entryFile.substring(0, entryFile.length - 3);
    }
    const sourceDir = path.join(options.baseDir, options.name);
    const entryFilePath = path.join(sourceDir, entryFile) + '.ts';
    return (host, context) => {
        const templateSource = schematics_1.apply(schematics_1.url('./files'), [
            schematics_1.template(Object.assign({}, core_1.strings, options, {
                entryFile,
                name,
            })),
            schematics_1.move(sourceDir),
        ]);
        return schematics_1.chain([
            schematics_1.branchAndMerge(schematics_1.chain([
                schematics_1.mergeWith(templateSource),
            ])),
            options.skipPackageJson ? schematics_1.noop() : addDependenciesAndScriptsToPackageJson(),
            options.skipTsConfig ? schematics_1.noop() : updateTsConfig(name, forwardSlashes(entryFilePath)),
        ])(host, context);
    };
}
exports.default = default_1;
//# sourceMappingURL=data:application/json;base64,